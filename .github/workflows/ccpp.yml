name: C/C++ CI

on:
  schedule:
    - cron: '41 7 * * 0,3'
  pull_request:
  push:
    branches:
      - '**'
env:
  PYTHONUTF8: 1
  GITHUB_TOKEN: ${{ github.token }}
  VCPKG_ROOT: "${{ github.workspace }}/vcpkg"

jobs:
  get-latest-vcpkg-release:
    runs-on: ubuntu-latest
    outputs:
      vcpkg_tag: ${{ steps.get-latest-vcpkg-release.outputs.tag_name }}
    steps:
      - name: Get latest Github release of vcpkg
        id: get-latest-vcpkg-release
        uses: cardinalby/git-get-release-action@v1
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false

  format-all-sources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: install
        run: sudo apt update && sudo apt upgrade && sudo apt install -y clang-format cmake-format
      - name: Format all sources
        run: clang-format -i sources/*.h sources/*.cpp test/*.h test/*.cpp protos/*.proto && cmake-format -i CMakeLists.txt
      - name: Create PR to update sources
        if: ${{ github.event_name == 'push' }}
        uses: peter-evans/create-pull-request@v7
        with:
          title: Auto PR for source code formatting
          commit-message: Format source code (auto generated)
          sign-commits: true

  build-ubuntu:
    needs: get-latest-vcpkg-release
    runs-on: ubuntu-22.04
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: install
        run: sudo apt-get install fuse libfuse-dev python3-venv
      - name: venv
        run: |
          python3 -m venv .venv;
          .venv/bin/pip install -U xattr;
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: ccpp-${{ runner.os }}-${{ runner.arch }}-${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ccpp-${{ runner.os }}-${{ runner.arch }}-${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}-
            ccpp-${{ runner.os }}-${{ runner.arch }}-
      - name: build-test
        run: |
          .venv/bin/python build.py --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --build_root=./build --build_type Debug
          ./build/securefs doc > docs/usage.md
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-linux-amd64
      - name: Create PR to update usage.md
        if: ${{ github.event_name == 'push' }}
        uses: peter-evans/create-pull-request@v7
        with:
          add-paths: docs/
          title: Auto PR for usage.md
          commit-message: Auto update usage.md
          sign-commits: true

  build-mac-fuse-t:
    needs: get-latest-vcpkg-release
    runs-on: macos-13
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: venv
        run:
          python3 -m venv .venv;
          .venv/bin/pip install -U xattr;
      - name: install
        run: brew tap macos-fuse-t/homebrew-cask && brew install fuse-t
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: ccpp-${{ runner.os }}-${{ runner.arch }}-${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ccpp-${{ runner.os }}-${{ runner.arch }}-${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}-
            ccpp-${{ runner.os }}-${{ runner.arch }}-
      - name: build-test
        run: .venv/bin/python build.py --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=x64-osx --build_root=./build --build_type Release --cmake_defines SECUREFS_USE_FUSET=ON
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-macos-fuse-t-amd64

  build-windows:
    needs: [get-latest-vcpkg-release, build-windows-clang-cl]
    runs-on: windows-latest
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Enable Developer Mode
        run:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock /t REG_DWORD /f /v AllowDevelopmentWithoutDevLicense /d 1
      - name: install
        run: choco install winfsp
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: ccpp-${{ runner.os }}-${{ runner.arch }}-${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ccpp-${{ runner.os }}-${{ runner.arch }}-${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}-
            ccpp-${{ runner.os }}-${{ runner.arch }}-
      - name: build-test
        run: python3 build.py --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=x64-windows-static-md --build_root=./build --build_type Debug
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/Debug/securefs.exe
          name: securefs-windows-amd64

  # Compile time validation only.
  build-windows-clang-cl:
    needs: get-latest-vcpkg-release
    runs-on: windows-latest
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Enable Developer Mode
        run:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock /t REG_DWORD /f /v AllowDevelopmentWithoutDevLicense /d 1
      - name: install
        run: choco install winfsp
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: ccpp-${{ runner.os }}-${{ runner.arch }}-${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ccpp-${{ runner.os }}-${{ runner.arch }}-${{ needs.get-latest-vcpkg-release.outputs.vcpkg_tag }}-
            ccpp-${{ runner.os }}-${{ runner.arch }}-
      - name: build-test
        run: python3 build.py --clang_cl --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=x64-windows-static-md --build_root=./build --build_type Debug

  build-freebsd:
    runs-on: ubuntu-latest
    needs: [get-latest-vcpkg-release, build-ubuntu]
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '2025.01.13'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: ccpp-freebsd-'2025.01.13'-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ccpp-freebsd-'2025.01.13'-
            ccpp-freebsd-
      - name: Test in FreeBSD
        id: freebsd
        uses: cross-platform-actions/action@v0.27.0
        with:
          environment_variables: GITHUB_TOKEN VCPKG_ROOT
          operating_system: freebsd
          version: '14.2'
          shell: bash
          run: |
            sudo pkg install -y cmake git python311 zip curl pkgconf ninja fusefs-libs
            if ! sudo kldstat -m fusefs > /dev/null 2>&1; then
                sudo kldload fusefs
            fi
            sh $VCPKG_ROOT/bootstrap-vcpkg.sh
            cd ${{ github.workspace }} && python3.11 build.py --enable_unit_test --vcpkg_root=$VCPKG_ROOT --build_root=./build --build_type Debug
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/build/securefs
          name: securefs-freebsd-amd64
