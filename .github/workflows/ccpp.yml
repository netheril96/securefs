name: C/C++ CI

on:
  pull_request:
  push:
    branches:
      - '**'
env:
  PYTHONUTF8: 1

jobs:
  build-ubuntu:
    runs-on: ubuntu-22.04
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: install
        run: sudo apt-get install fuse libfuse-dev
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: cache-vcpkg-restore
        id: cache-vcpkg-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: build-ubuntu-debug-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            build-ubuntu-debug-
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: build-test
        run: |
          python3 build.py --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --build_root=./build --build_type Debug
          ./build/securefs doc > docs/usage.md
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-linux-amd64
      - name: cache-vcpkg-save
        id: cache-vcpkg-save
        if: always() && steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-vcpkg-restore.outputs.cache-primary-key }}
          path: ${{ github.workspace }}/build/vcpkg_installed
      - name: Create PR to update usage.md
        if: ${{ github.event_name == 'push' }}
        uses: peter-evans/create-pull-request@v6
        with:
          add-paths: docs/
          title: Auto PR for usage.md
          commit-message: Auto update usage.md

  build-mac-fuse-t:
    runs-on: macos-13
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: venv
        run:
          python3 -m venv .venv;
          .venv/bin/pip install -U xattr;
      - name: install
        run: brew tap macos-fuse-t/homebrew-cask && brew install fuse-t
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: cache-vcpkg-restore
        id: cache-vcpkg-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: build-mac-debug-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            build-mac-debug-
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: build-test
        run: .venv/bin/python build.py --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=x64-osx --build_root=./build --build_type Debug --cmake_defines SECUREFS_USE_FUSET=ON
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-macos-fuse-t-amd64
      - name: cache-vcpkg-save
        id: cache-vcpkg-save
        if: always() && steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-vcpkg-restore.outputs.cache-primary-key }}
          path: ${{ github.workspace }}/build/vcpkg_installed

  build-windows:
    runs-on: windows-latest
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Enable Developer Mode
        run: reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock /t REG_DWORD /f /v AllowDevelopmentWithoutDevLicense /d 1
      - name: install
        run: choco install winfsp
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: cache-vcpkg-restore
        id: cache-vcpkg-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: build-windows-debug-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            build-windows-debug-
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: build-test
        run: python3 build.py --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=x64-windows-static-md --build_root=./build --build_type Debug
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/Debug/securefs.exe
          name: securefs-windows-amd64
      - name: cache-vcpkg-save
        id: cache-vcpkg-save
        if: always() && steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-vcpkg-restore.outputs.cache-primary-key }}
          path: ${{ github.workspace }}/build/vcpkg_installed

  # Only validate the build with clang-cl.
  # clang has many compile time validations that other compilers don't have, such as thread safety validation.
  build-windows-clang-cl:
    needs: build-windows
    runs-on: windows-latest
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Enable Developer Mode
        run: reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock /t REG_DWORD /f /v AllowDevelopmentWithoutDevLicense /d 1
      - name: install
        run: choco install winfsp
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: cache-vcpkg-restore
        id: cache-vcpkg-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: build-windows-debug-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            build-windows-debug-
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: build-test
        run: |
          python3 build.py --clang_cl --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=x64-windows-static-md --build_root=./build --build_type Debug
      - name: cache-vcpkg-save
        id: cache-vcpkg-save
        if: always() && steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-vcpkg-restore.outputs.cache-primary-key }}
          path: ${{ github.workspace }}/build/vcpkg_installed
