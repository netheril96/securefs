name: Build release binaries

on:
  workflow_dispatch:
  schedule:
    - cron: '41 7 * * 2,6'
  push:
    branches:
      - '**'
    tags:
      - '**'
env:
  PYTHONUTF8: 1
  GITHUB_TOKEN: ${{ github.token }}
  VCPKG_ROOT: "${{ github.workspace }}/vcpkg"

jobs:
  build-ubuntu:
    runs-on: ubuntu-22.04
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: install
        run: sudo apt update && sudo apt upgrade && sudo apt install fuse libfuse-dev clang-15 python3-venv
      - name: venv
        run: |
          python3 -m venv .venv;
          .venv/bin/pip install -U xattr;
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-
            release-${{ runner.os }}-${{ runner.arch }}-
      - name: build-test
        env:
          CC: clang-15
          CXX: clang++-15
          VCPKG_KEEP_ENV_VARS: "CC;CXX"
        run: .venv/bin/python build.py --lto --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --build_root=./build
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-linux-amd64-release
      - name: Upload Logs Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-logs
          path: |
            build/**/*.log
            build/**/*.out
            build/**/*.err

  build-ubuntu-arm64:
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: install
        run: sudo apt update && sudo apt upgrade && sudo apt install fuse libfuse-dev clang-15 python3-venv
      - name: venv
        run: |
          python3 -m venv .venv;
          .venv/bin/pip install -U xattr;
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-
            release-${{ runner.os }}-${{ runner.arch }}-
      - name: build-test
        env:
          CC: clang-15
          CXX: clang++-15
          VCPKG_KEEP_ENV_VARS: "CC;CXX"
        run: .venv/bin/python build.py --lto --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --build_root=./build
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-linux-arm64-release
      - name: Upload Logs Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-logs
          path: |
            build/**/*.log
            build/**/*.out
            build/**/*.err

  build-alpine:
    runs-on: ubuntu-latest
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
      - name: install
        run: sudo apt update && sudo apt upgrade && sudo apt install fuse libfuse-dev clang-15 python3-venv
      - name: venv
        run: |
          python3 -m venv .venv;
          .venv/bin/pip install -U xattr;
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: release-alpine-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-alpine-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-
            release-alpine-${{ runner.arch }}-
      - uses: jirutka/setup-alpine@master
        with:
          packages: >
            curl
            git
            cmake
            ninja-build
            fuse-dev
            fuse-static
            python3
            build-base
            zip
            linux-headers
            autoconf
            automake
            autoconf-archive
            sudo
      - name: cross-compile
        env:
          CFLAGS: -static
          CXXFLAGS: -static
          VCPKG_KEEP_ENV_VARS: "CFLAGS;CXXFLAGS"
        shell: alpine.sh {0}
        run: |
          export PATH="/usr/lib/ninja-build/bin:$PATH"
          echo | sudo tee /usr/include/linux/prctl.h # A hack to avoid a conflict with the musl headers when building mimalloc
          python3 build.py --lto --enable_unit_test --vcpkg_root=${{ github.workspace }}/vcpkg --build_root=./build --cmake_defines VCPKG_MANIFEST_FEATURES=mimalloc SECUREFS_ENABLE_MIMALLOC=ON
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-linux-amd64-musl-static-release
      - name: Integration test
        env:
          SECUREFS_BINARY: build/securefs
        run:
          .venv/bin/python test/simple_test.py > build/simple_test.out.log 2> build/simple_test.err.log
      - name: Upload Logs Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-logs
          path: |
            build/**/*.log
            build/**/*.out
            build/**/*.err

  build-mac:
    runs-on: macos-13
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: install
        run: brew install macfuse && pip install xattr
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-
            release-${{ runner.os }}-${{ runner.arch }}-
      - name: build
        run: python3 build.py --lto --enable_unit_test --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=x64-osx --build_root=./build
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-macos-amd64-release
      - name: Upload Logs Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-logs
          path: |
            build/**/*.log
            build/**/*.out
            build/**/*.err

  build-mac-arm64:
    runs-on: macos-13
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: install
        run: brew install macfuse && pip install xattr
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: release-${{ runner.os }}-arm64-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-${{ runner.os }}-arm64-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-
            release-${{ runner.os }}-arm64-
      - name: build
        run: python3 build.py --lto --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=arm64-osx --build_root=./build --cmake_defines CMAKE_OSX_ARCHITECTURES=arm64
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-macos-arm64-release
      - name: Upload Logs Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-logs
          path: |
            build/**/*.log
            build/**/*.out
            build/**/*.err

  build-mac-fuse-t:
    needs: build-mac
    runs-on: macos-13
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: venv
        run:
          python3 -m venv .venv;
          .venv/bin/pip install -U xattr;
      - name: install
        run: brew tap macos-fuse-t/homebrew-cask && brew install fuse-t
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-
            release-${{ runner.os }}-${{ runner.arch }}-
      - name: build-test
        run: .venv/bin/python build.py --lto --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=x64-osx --build_root=./build --build_type Release --cmake_defines SECUREFS_USE_FUSET=ON
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-macos-fuse-t-amd64-release
      - name: Upload Logs Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-logs
          path: |
            build/**/*.log
            build/**/*.out
            build/**/*.err

  build-mac-fuse-t-arm64:
    needs: build-mac-arm64
    runs-on: macos-13
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: venv
        run:
          python3 -m venv .venv;
          .venv/bin/pip install -U xattr;
      - name: install
        run: brew tap macos-fuse-t/homebrew-cask && brew install fuse-t
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: release-${{ runner.os }}-arm64-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-${{ runner.os }}-arm64-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-
            release-${{ runner.os }}-arm64-
      - name: build-test
        run: .venv/bin/python build.py --lto --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=arm64-osx --build_root=./build --build_type Release --cmake_defines SECUREFS_USE_FUSET=ON CMAKE_OSX_ARCHITECTURES=arm64
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/securefs
          name: securefs-macos-fuse-t-arm64-release
      - name: Upload Logs Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-logs
          path: |
            build/**/*.log
            build/**/*.out
            build/**/*.err

  build-windows:
    runs-on: windows-latest
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: install
        run: choco install winfsp
      - name: Enable Developer Mode
        run:  reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock /t REG_DWORD /f /v AllowDevelopmentWithoutDevLicense /d 1
      - name: Get latest Github release of vcpkg
        uses: cardinalby/git-get-release-action@v1
        id: get-latest-vcpkg-release
        with:
          latest: true
          repo: microsoft/vcpkg
          prerelease: false
          draft: false
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '${{ steps.get-latest-vcpkg-release.outputs.tag_name }}'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-${{ runner.os }}-${{ runner.arch }}-${{ steps.get-latest-vcpkg-release.outputs.tag_name }}-
            release-${{ runner.os }}-${{ runner.arch }}-
      - name: build-test
        run: python3 build.py --lto --enable_unit_test --enable_integration_test --vcpkg_root=${{ github.workspace }}/vcpkg --triplet=x64-windows-static-md --build_root=./build
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: build/Release/securefs.exe
          name: securefs-windows-amd64-release
      - name: Upload Logs Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-logs
          path: |
            build/**/*.log
            build/**/*.out
            build/**/*.err

  build-freebsd:
    runs-on: ubuntu-latest
    timeout-minutes: 75
    steps:
      - uses: actions/checkout@v4
      - name: checkout-vcpkg
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          repository: microsoft/vcpkg
          ref: '2025.01.13'
          fetch-depth: 1
      - name: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: release-freebsd-'2025.01.13'-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            release-freebsd-'2025.01.13'-
            release-freebsd-
      - name: Test in FreeBSD
        id: freebsd
        uses: cross-platform-actions/action@v0.27.0
        with:
          environment_variables: GITHUB_TOKEN VCPKG_ROOT
          operating_system: freebsd
          version: '14.2'
          shell: bash
          run: |
            sudo pkg install -y cmake git python311 zip curl pkgconf ninja fusefs-libs
            if ! sudo kldstat -m fusefs > /dev/null 2>&1; then
               sudo kldload fusefs
            fi
            sh $VCPKG_ROOT/bootstrap-vcpkg.sh
            cd ${{ github.workspace }} && python3.11 build.py --enable_unit_test --vcpkg_root=$VCPKG_ROOT --build_root=./build --lto
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/build/securefs
          name: securefs-freebsd-amd64-release
      - name: Upload Logs Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-logs
          path: |
            build/**/*.log
            build/**/*.out
            build/**/*.err
