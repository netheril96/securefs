syntax = "proto3";

package securefs;

message LegacySecurefsJsonParams
{
    uint32 version = 1;
    optional uint32 block_size = 2;
    optional uint32 iv_size = 3;
    string salt = 4;

    message EncryptedMasterKey
    {
        string iv = 1 [ json_name = "IV" ];
        string mac = 2 [ json_name = "MAC" ];
        string ciphertext = 3 [ json_name = "key" ];
    }
    EncryptedMasterKey encrypted_key = 5;

    uint32 iterations = 6;
    string pbkdf = 7;
    uint32 scrypt_r = 8;
    uint32 scrypt_p = 9;
    uint32 argon2_m_cost = 10;
    uint32 argon2_p = 11;

    uint32 max_padding = 12;
    bool long_name_component = 13;
}

message DecryptedSecurefsParams
{
    message SizeParams
    {
        uint32 block_size = 1;
        uint32 iv_size = 2;
        uint32 max_padding_size = 3;
    }

    SizeParams size_params = 1;

    message LiteFormatParams
    {
        bytes name_key = 1;
        bytes content_key = 2;
        bytes xattr_key = 3;
        bytes padding_key = 4;
        optional uint32 long_name_threshold = 5;
    }

    message FullFormatParams
    {
        bytes master_key = 1;
        bool store_time = 2;
        bool legacy_file_table_io = 3;
        bool case_insensitive = 4;
        bool unicode_normalization_agnostic = 5;
    }

    oneof format_specific_params
    {
        LiteFormatParams lite_format_params = 2;
        FullFormatParams full_format_params = 3;
    }
}

message EncryptedSecurefsParams
{
    bytes salt = 1;
    bytes iv = 2;
    bytes mac = 3;
    bytes ciphertext = 4;

    message Argon2idParams
    {
        uint32 time_cost = 1;
        uint32 memory_cost = 2;
        uint32 parallelism = 3;
    }

    oneof pbkdf_params
    {
        Argon2idParams argon2id_params = 5;
    }
}

message MountOptions
{
    bool read_only = 1;
    bool disable_verification = 2;
    optional int32 uid_override = 3;
    optional int32 gid_override = 4;
    bool enable_xattr = 5;
    bool case_fold = 6;
    bool unicode_normalize_nfc = 7;
    bool plain_text_names = 8;
    bool allow_sensitive_logging = 9;
    int64 max_idle_seconds = 10;
}

message InternalMountData
{
    DecryptedSecurefsParams decrypted_params = 1;
    MountOptions mount_options = 2;
    repeated string fuse_args = 3;
    string data_dir = 4;

    enum LogLevel {
        kLogTrace = 0;
        kLogVerbose = 1;
        kLogInfo = 2;
        kLogWarning = 3;
        kLogError = 4;
    }

    message BackgroundLogging
    {
        // If not present, then disable logging in the background process.
        optional int64 logger_handle = 1;
        optional LogLevel log_level = 2;
    }

    // Only present if mounting continues in a child process.
    BackgroundLogging background_logging = 5;
}
